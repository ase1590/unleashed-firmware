diff --git a/applications/settings/notification_settings/notification_settings_app.c b/applications/settings/notification_settings/notification_settings_app.c
index db9a1a01..88266b78 100644
--- a/applications/settings/notification_settings/notification_settings_app.c
+++ b/applications/settings/notification_settings/notification_settings_app.c
@@ -3,6 +3,7 @@
 #include <gui/modules/variable_item_list.h>
 #include <gui/view_dispatcher.h>
 #include <lib/toolbox/value_index.h>
+#include <lib/drivers/WS2812B.h>
 
 #define MAX_NOTIFICATION_SETTINGS 4
 
@@ -73,9 +74,10 @@ const bool vibro_value[VIBRO_COUNT] = {false, true};
 static void backlight_changed(VariableItem* item) {
     NotificationAppSettings* app = variable_item_get_context(item);
     uint8_t index = variable_item_get_current_value_index(item);
-
+    rgb_backlight_set_brightness(app->notification->settings.display_brightness);
     variable_item_set_current_value_text(item, backlight_text[index]);
     app->notification->settings.display_brightness = backlight_value[index];
+    furi_delay_ms(1);
     notification_message(app->notification, &sequence_display_backlight_on);
 }
 
@@ -125,8 +127,18 @@ static void vibro_changed(VariableItem* item) {
     notification_message(app->notification, &sequence_single_vibro);
 }
 
+static void color_changed(VariableItem* item) {
+    NotificationAppSettings* app = variable_item_get_context(item);
+    uint8_t index = variable_item_get_current_value_index(item);
+    rgb_backlight_set_color(index);
+    furi_delay_ms(1);
+    variable_item_set_current_value_text(item, rgb_backlight_get_color_text(index));
+    notification_message(app->notification, &sequence_display_backlight_on);
+}
+
 static uint32_t notification_app_settings_exit(void* context) {
     UNUSED(context);
+    rgb_backlight_save_settings();
     return VIEW_NONE;
 }
 
@@ -149,6 +161,12 @@ static NotificationAppSettings* alloc_settings() {
     variable_item_set_current_value_index(item, value_index);
     variable_item_set_current_value_text(item, backlight_text[value_index]);
 
+    item = variable_item_list_add(
+        app->variable_item_list, "LCD Color", rgb_backlight_get_color_count(), color_changed, app);
+    value_index = rgb_backlight_get_settings()->display_color_index;
+    variable_item_set_current_value_index(item, value_index);
+    variable_item_set_current_value_text(item, rgb_backlight_get_color_text(value_index));
+
     item = variable_item_list_add(
         app->variable_item_list, "Backlight Time", DELAY_COUNT, screen_changed, app);
     value_index = value_index_uint32(
@@ -200,6 +218,7 @@ int32_t notification_settings_app(void* p) {
     NotificationAppSettings* app = alloc_settings();
     view_dispatcher_run(app->view_dispatcher);
     notification_message_save_settings(app->notification);
+
     free_settings(app);
     return 0;
 }
diff --git a/firmware/targets/f7/furi_hal/furi_hal_light.c b/firmware/targets/f7/furi_hal/furi_hal_light.c
index e6b3ab7d..c21c4723 100644
--- a/firmware/targets/f7/furi_hal/furi_hal_light.c
+++ b/firmware/targets/f7/furi_hal/furi_hal_light.c
@@ -3,6 +3,7 @@
 #include <furi_hal_light.h>
 #include <lp5562.h>
 #include <stdint.h>
+#include <WS2812B.h>
 
 #define LED_CURRENT_RED 50
 #define LED_CURRENT_GREEN 50
@@ -42,9 +43,7 @@ void furi_hal_light_set(Light light, uint8_t value) {
         lp5562_set_channel_value(&furi_hal_i2c_handle_power, LP5562ChannelBlue, value);
     }
     if(light & LightBacklight) {
-        uint8_t prev = lp5562_get_channel_value(&furi_hal_i2c_handle_power, LP5562ChannelWhite);
-        lp5562_execute_ramp(
-            &furi_hal_i2c_handle_power, LP5562Engine1, LP5562ChannelWhite, prev, value, 100);
+        rgb_backlight_update(value);
     }
     furi_hal_i2c_release(&furi_hal_i2c_handle_power);
 }
diff --git a/lib/drivers/WS2812B.c b/lib/drivers/WS2812B.c
new file mode 100644
index 00000000..52b90d66
--- /dev/null
+++ b/lib/drivers/WS2812B.c
@@ -0,0 +1,208 @@
+/*
+ * WS2812B.c
+ *
+ * Created: 03.05.2018 20:28:37
+ *  Author: Quenon
+ */
+#include "WS2812B.h"
+#include <string.h>
+#include <stm32wbxx.h>
+#include "furi_hal_light.h"
+#include <furi.h>
+#include <furi_hal.h>
+#include <storage/storage.h>
+#include <input/input.h>
+
+#define TAG "RGB Backlight"
+#define RGB_BACKLIGHT_SETTINGS_VERSION 3
+#define RGB_BACKLIGHT_SETTINGS_FILE_NAME ".rgb_backlight.settings"
+#define RGB_BACKLIGHT_SETTINGS_PATH EXT_PATH(RGB_BACKLIGHT_SETTINGS_FILE_NAME)
+
+static uint8_t WS2812B_ledbuffer[WS2812B_LEDS][3];
+
+static RGBBacklightSettings rgb_settings = {
+    .version = RGB_BACKLIGHT_SETTINGS_VERSION,
+    .display_brightness = 1.0f,
+    .display_color_index = 0,
+    .settings_is_loaded = false};
+
+#define COLOR_COUNT (sizeof(color_value) / sizeof(uint32_t))
+const char* color_text[] = {
+    "Orange",
+    "Yellow",
+    "Lime",
+    "Olive",
+    "Green",
+    "Teal",
+    "Blue",
+    "Aqua",
+    "Fuchsia",
+    "Red",
+    "White"};
+const uint32_t color_value[] = {
+    //R G B
+    0xFF4500, //Orange
+    0xFFFF00, //Yellow
+    0x00FF00, //Lime
+    0x808000, //Olive
+    0x008000, //Green
+    0x008080, //Teal
+    0x0000FF, //Blue
+    0x00FFFF, //Aqua
+    0xFF00FF, //Fuchsia
+    0xFF0000, //Red
+    0xFFFFE0, //White
+};
+
+void WS2812B_send(void) {
+    furi_kernel_lock();
+    /* ╨Я╨╛╤Б╨╗╨╡╨┤╨╛╨▓╨░╤В╨╡╨╗╤М╨╜╨░╤П ╨╛╤В╨┐╤А╨░╨▓╨║╨░ ╤Ж╨▓╨╡╤В╨╛╨▓ ╤Б╨▓╨╡╤В╨╛╨┤╨╕╨╛╨┤╨╛╨▓ */
+    for(uint8_t lednumber = 0; lednumber < WS2812B_LEDS; lednumber++) {
+        //╨Я╨╛╤Б╨╗╨╡╨┤╨╛╨▓╨░╤В╨╡╨╗╤М╨╜╨░╤П ╨╛╤В╨┐╤А╨░╨▓╨║╨░ ╤Ж╨▓╨╡╤В╨╛╨▓ ╤Б╨▓╨╡╤В╨╛╨┤╨╕╨╛╨┤╨░
+        for(uint8_t color = 0; color < 3; color++) {
+            //╨Я╨╛╤Б╨╗╨╡╨┤╨╛╨▓╨░╤В╨╡╨╗╤М╨╜╨░╤П ╨╛╤В╨┐╤А╨░╨▓╨║╨░ ╨▒╨╕╤В╨╛╨▓ ╤Ж╨▓╨╡╤В╨░
+            for(uint8_t i = 7; i != 255; i--) {
+                if(WS2812B_ledbuffer[lednumber][color] & (1 << i)) {
+                    furi_hal_gpio_write(LED_PIN, true);
+                    uint32_t start = DWT->CYCCNT;
+                    while((DWT->CYCCNT - start) < 31) {
+                    }
+                    furi_hal_gpio_write(LED_PIN, false);
+                    start = DWT->CYCCNT;
+                    while((DWT->CYCCNT - start) < 15) {
+                    }
+                } else {
+                    furi_hal_gpio_write(LED_PIN, true);
+                    uint32_t start = DWT->CYCCNT;
+                    while((DWT->CYCCNT - start) < 15) {
+                    }
+                    furi_hal_gpio_write(LED_PIN, false);
+                    start = DWT->CYCCNT;
+                    while((DWT->CYCCNT - start) < 31) {
+                    }
+                }
+            }
+        }
+    }
+    furi_kernel_unlock();
+}
+
+static void _port_init(void) {
+    furi_hal_gpio_init(LED_PIN, GpioModeOutputPushPull, GpioPullNo, GpioSpeedVeryHigh);
+}
+
+uint8_t rgb_backlight_get_color_count(void) {
+    return COLOR_COUNT;
+}
+
+const char* rgb_backlight_get_color_text(uint8_t index) {
+    return color_text[index];
+}
+
+static void rgb_backlight_load_settings(void) {
+    _port_init();
+    RGBBacklightSettings settings;
+    File* file = storage_file_alloc(furi_record_open(RECORD_STORAGE));
+    const size_t settings_size = sizeof(RGBBacklightSettings);
+
+    FURI_LOG_I(TAG, "loading settings from \"%s\"", RGB_BACKLIGHT_SETTINGS_PATH);
+    bool fs_result =
+        storage_file_open(file, RGB_BACKLIGHT_SETTINGS_PATH, FSAM_READ, FSOM_OPEN_EXISTING);
+
+    if(fs_result) {
+        uint16_t bytes_count = storage_file_read(file, &settings, settings_size);
+
+        if(bytes_count != settings_size) {
+            fs_result = false;
+        }
+    }
+
+    if(fs_result) {
+        FURI_LOG_I(TAG, "load success");
+        if(settings.version != RGB_BACKLIGHT_SETTINGS_VERSION) {
+            FURI_LOG_E(
+                TAG,
+                "version(%d != %d) mismatch",
+                settings.version,
+                RGB_BACKLIGHT_SETTINGS_VERSION);
+        } else {
+            furi_kernel_lock();
+            memcpy(&rgb_settings, &settings, settings_size);
+            furi_kernel_unlock();
+        }
+    } else {
+        FURI_LOG_E(TAG, "load failed, %s", storage_file_get_error_desc(file));
+    }
+
+    storage_file_close(file);
+    storage_file_free(file);
+    furi_record_close(RECORD_STORAGE);
+    rgb_settings.settings_is_loaded = true;
+};
+
+void rgb_backlight_save_settings(void) {
+    RGBBacklightSettings settings;
+    File* file = storage_file_alloc(furi_record_open(RECORD_STORAGE));
+    const size_t settings_size = sizeof(RGBBacklightSettings);
+
+    FURI_LOG_I(TAG, "saving settings to \"%s\"", RGB_BACKLIGHT_SETTINGS_PATH);
+
+    furi_kernel_lock();
+    memcpy(&settings, &rgb_settings, settings_size);
+    furi_kernel_unlock();
+
+    bool fs_result =
+        storage_file_open(file, RGB_BACKLIGHT_SETTINGS_PATH, FSAM_WRITE, FSOM_CREATE_ALWAYS);
+
+    if(fs_result) {
+        uint16_t bytes_count = storage_file_write(file, &settings, settings_size);
+
+        if(bytes_count != settings_size) {
+            fs_result = false;
+        }
+    }
+
+    if(fs_result) {
+        FURI_LOG_I(TAG, "save success");
+    } else {
+        FURI_LOG_E(TAG, "save failed, %s", storage_file_get_error_desc(file));
+    }
+
+    storage_file_close(file);
+    storage_file_free(file);
+    furi_record_close(RECORD_STORAGE);
+};
+
+RGBBacklightSettings* rgb_backlight_get_settings(void) {
+    if(!rgb_settings.settings_is_loaded) {
+        rgb_backlight_load_settings();
+    }
+    return &rgb_settings;
+}
+
+void rgb_backlight_set_color(uint8_t color_index) {
+    rgb_settings.display_color_index = color_index;
+}
+void rgb_backlight_set_brightness(float brightness) {
+    rgb_settings.display_brightness = brightness;
+}
+
+void rgb_backlight_update(uint8_t backlight) {
+    if(!rgb_settings.settings_is_loaded) {
+        rgb_backlight_load_settings();
+    }
+    for(uint8_t i = 0; i < WS2812B_LEDS; i++) {
+        //Green
+        WS2812B_ledbuffer[i][0] =
+            ((color_value[rgb_settings.display_color_index] & 0x00FF00) >> 8) *
+            (backlight / 255.0f);
+        //Red
+        WS2812B_ledbuffer[i][1] =
+            (color_value[rgb_settings.display_color_index] >> 16) * (backlight / 255.0f);
+        //Blue
+        WS2812B_ledbuffer[i][2] =
+            (color_value[rgb_settings.display_color_index] & 0xFF) * (backlight / 255.0f);
+    }
+
+    WS2812B_send();
+}
diff --git a/lib/drivers/WS2812B.h b/lib/drivers/WS2812B.h
new file mode 100644
index 00000000..c73d04ee
--- /dev/null
+++ b/lib/drivers/WS2812B.h
@@ -0,0 +1,38 @@
+/*
+ * WS2812B.h
+ *
+ * Created: 03.05.2018 20:28:20
+ *  Author: Quenon
+ */
+
+#ifndef WS2812B_H_
+#define WS2812B_H_
+
+#include "furi.h"
+#include <stdint.h>
+#include <stdbool.h>
+#include <input/input.h>
+
+typedef struct {
+    uint8_t version;
+    uint8_t display_color_index;
+    float display_brightness;
+    bool settings_is_loaded;
+} RGBBacklightSettings;
+
+#define LED_PIN &gpio_ext_pa7
+#define WS2812B_LEDS 3
+
+void rgb_backlight_save_settings(void);
+
+void rgb_backlight_update(uint8_t backlight);
+
+void rgb_backlight_set_color(uint8_t color_index);
+void rgb_backlight_set_color(uint8_t color_index);
+void rgb_backlight_set_brightness(float brightness);
+
+RGBBacklightSettings* rgb_backlight_get_settings(void);
+uint8_t rgb_backlight_get_color_count(void);
+const char* rgb_backlight_get_color_text(uint8_t index);
+
+#endif /* WS2812B_H_ */
\ No newline at end of file
